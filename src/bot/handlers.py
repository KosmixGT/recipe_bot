DEFAULT_RECIPE_IMAGE = "https://lh3.googleusercontent.com/proxy/FgRa3A2R--m9aYq5RLDbnYgxkWuAW3ZMxxJwGEEPduVM7_f_LFAFLTytF6sV8jXUKZ1lt16ujFn_3JatSiTd"  # or any other default image URL

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from src.services.recipe_service import get_recipes, _get_recipe_details
from src.services.translator import translate_to_english, clean_and_translate_instructions
from src.bot.filters import recipe_filters
from src.services.analytics_service import generate_analytics

logger = logging.getLogger(__name__)

class MessageHandlers:
    @staticmethod
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –†–µ—Ü–µ–ø—Ç-–±–æ—Ç! üç≥\n\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª\n"
            "‚Ä¢ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ\n"
            "‚Ä¢ –ü—Ä–∏–º–µ—Ä: —Ç–æ–º–∞—Ç—ã, –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å\n"
            "‚Ä¢ Example: tomatoes chicken rice\n\n"
            "–Ø –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã! üë®‚Äçüç≥"
        )

    @staticmethod
    async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_input = update.message.text
        # logger.info(f"Received message: {user_input}")
        
        # Store ingredients in context
        context.user_data['ingredients'] = user_input
        
        # Ask user for search preference
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:\n\n"
            "üîç –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –í–°–ï —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã\n"
            "üîé –ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫ - –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –õ–Æ–ë–´–ï –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
            reply_markup=ButtonHandlers.get_search_type_buttons()
    )
    

class ButtonHandlers:
    @staticmethod
    def get_search_type_buttons():
        buttons = [
            [
                InlineKeyboardButton("–°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ (–≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã)", callback_data="strict_search"),
                InlineKeyboardButton("–ì–∏–±–∫–∏–π –ø–æ–∏—Å–∫", callback_data="flexible_search")
            ]
        ]
        return InlineKeyboardMarkup(buttons)
    @staticmethod
    def get_recipe_buttons(recipe):
        buttons = [
            [
                InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url=recipe['url']),
                InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è", callback_data=f"instructions_{str(recipe['id'])}")
            ]
        ]
        return InlineKeyboardMarkup(buttons)

    @staticmethod
    def get_filter_buttons():
        buttons = [
            [InlineKeyboardButton("–°–∞–º—ã–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ", callback_data="most_caloric")],
            [InlineKeyboardButton("–°–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ", callback_data="most_healthy")],
            [InlineKeyboardButton("–ü–æ–∫–∞–∂–∏ –≤—Å–µ", callback_data="show_all")],
            [InlineKeyboardButton("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data="analytics")]
        ]
        return InlineKeyboardMarkup(buttons)

    
    @staticmethod
    async def handle_search_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data in ["strict_search", "flexible_search"]:
            # Show processing message
            processing_message = await query.message.reply_text(
                "üîç –ò—â—É —Ä–µ—Ü–µ–ø—Ç—ã –ø–æ –≤–∞—à–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # Get ingredients from context and translate
            ingredients = [translate_to_english(i.strip()) 
                        for i in context.user_data['ingredients'].split(",")]
            
            # Get recipes with appropriate ranking
            ranking = 1 if query.data == "strict_search" else 2
            recipes = get_recipes(ingredients, number=1, ranking=ranking)
            
            # Clean up processing message
            await processing_message.delete()
            
            context.user_data['recipes'] = recipes
            
            if recipes:
                await query.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å:\n" +
                    "–°–∞–º—ã–µ –∫–∞–ª–æ—Ä–∏–π–Ω—ã–µ - —Ç–æ–ø-5 —Å–∞–º—ã—Ö –∫–∞–ª–æ—Ä–∏–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n" +
                    "–°–∞–º—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ - —Ç–æ–ø-5 —Å–∞–º—ã—Ö –ø–æ–ª–µ–∑–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤\n" +
                    "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ - –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã",
                    reply_markup=ButtonHandlers.get_filter_buttons()
                )
            else:
                await query.message.reply_text(
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                )

    @staticmethod
    async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        if query.data in ["most_caloric", "most_healthy", "show_all"]:
            recipes = context.user_data.get('recipes', [])
            filtered_recipes = recipe_filters[query.data](recipes)
            
            for recipe in filtered_recipes:
                caption = (
                    f"üç≥ {recipe['title']}\n\n"
                    f"üìù {_truncate_text(recipe['summary'])}\n\n"
                    f"üî• –ö–∞–ª–æ—Ä–∏–∏: {recipe['calories']} –∫–∫–∞–ª.\n"
                    f"üí™ –ü–æ–ª–µ–∑–Ω–æ—Å—Ç—å: {recipe['healthScore']}/100"
                )
                
                try:
                    await query.message.reply_photo(
                        photo=recipe['image'],
                        caption=caption,
                        reply_markup=ButtonHandlers.get_recipe_buttons(recipe)
                    )
                except:
                    try:
                        await query.message.reply_photo(
                            photo=DEFAULT_RECIPE_IMAGE,
                            caption=caption,
                            reply_markup=ButtonHandlers.get_recipe_buttons(recipe)
                        )
                    except:
                        await query.message.reply_text(
                            caption,
                            reply_markup=ButtonHandlers.get_recipe_buttons(recipe)
                        )

        elif query.data.startswith('instructions_'):
            recipe_id = query.data.split('_')[1]
            recipes = context.user_data.get('recipes', [])
            recipe = next((r for r in recipes if str(r['id']) == recipe_id), None)
            
            if recipe and recipe.get('instructions'):
                truncated_instructions = _truncate_text(recipe['instructions'], max_length=800, add_site_reference=True)
                await query.message.reply_text(truncated_instructions)
            else:
                await query.message.reply_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        
        elif query.data == "analytics":
            recipes = context.user_data.get('recipes', [])
            if recipes:
                analytics_data = generate_analytics(recipes)
                
                await query.message.reply_photo(
                    photo=analytics_data['nutrition_comparison'],
                    caption="üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –∏ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"
                )
                
                await query.message.reply_photo(
                    photo=analytics_data['health_distribution'],
                    caption="ü•ó –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏"
                )
                
                await query.message.reply_photo(
                    photo=analytics_data['calorie_ranges'],
                    caption="üî• –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏"
                )
                
                await query.message.reply_photo(
                    photo=analytics_data['price_analysis'],
                    caption="üí∞ –ê–Ω–∞–ª–∏–∑ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤"
                )
                
                await query.message.reply_photo(
                    photo=analytics_data['ingredients_analysis'],
                    caption="ü•ò –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"
                )
            else:
                await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")

def _truncate_text(text, max_length=800, add_site_reference=False):
    """Truncate text to fit Telegram limits"""
    site_msg = "\n\n–ü–æ–ª–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç–µ..." if add_site_reference else "..."
    if len(text) <= max_length:
        return text
    return text[:max_length-len(site_msg)] + site_msg